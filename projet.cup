//Specification JCup
import java_cup.runtime.*;
import java.util.Map;
import java.util.HashMap;

parser code {:
  public static void main(String args[]) throws Exception {
    new parser(new Yylex(System.in)).parse();
  }
:}

action code {:
  public Map<String,Boolean> tab = new HashMap<>();

  //methodes
  public void affSymbole(String s) {
    System.out.println( s + " = " + tab.get(s));
  }

  public void AfficheTable() {
    System.out.println("The table contains " + tab.size() + " variables");
    for (String i : tab.keySet()) 
      affSymbole(i);
  }
:}

terminal OR, AND, NOT, LPAR, RPAR, AFF, EOL, PRINT, EXIT;
terminal String VAR;
terminal Boolean BOOL_VAL;

non terminal prog, programme, affect, instr, print, expr;
non terminal Boolean Expr;

precedence left NOT, AND, OR;

programme ::= {: 
          System.out.println("Programm start here : "); 
        :} prog
        ;

prog ::= affect prog
        | instr prog
        | EXIT EOL {: 
              System.out.println("Bye !"); 
            :}
        |
        ;

Expr ::= NOT Expr:e1 {: RESULT= (!e1); :}
        | Expr:e1 AND Expr:e2 {: RESULT=(e1 && e2); :}
        | Expr:e1 OR Expr:e2 {: RESULT=(e1 || e2); :}
        | LPAR Expr:e RPAR {: RESULT=e; :}
        | VAR:v {: if(!tab.containsKey(v))
                      System.out.println("Variable " + v + "not declared");
                   else
                      RESULT = tab.get(v);
                :}
        | BOOL_VAL:b {: RESULT = b; :}
        ;

expr ::= Expr:e {: System.out.println(e); :}
        ;

affect ::= VAR:id AFF Expr:e {: 
          if(tab.containsKey(id))
            System.out.println("La variable " + id + " existe deja !");
          else
            tab.put(id,e);
        :}
        ;

print ::= PRINT {: 
          AfficheTable();
        :}
        ;

instr ::= expr EOL
        | affect EOL
        | print EOL
        ;
