//Specification JCup
import java_cup.runtime.*;
import java.util.Map;
import java.util.HashMap;

parser code {:
  public static void main(String args[]) throws Exception {
    new parser(new Yylex(System.in)).parse();
  }
:}

action code {:
  public Map<String,Boolean> tab = new HashMap<>();

  //methodes
  public void AfficheTable() {
    System.out.println("\nThe table contains " + tab.size() + " variables");
    for (String i : tab.keySet()) 
      System.out.println( i + " = " + tab.get(i));
  }
:}

terminal OR, AND, NOT, LPAR, RPAR, AFF, EOL, PRINT, EXIT;
terminal String VAR;
terminal Boolean BOOL_VAL;

non terminal prog, programme, affect, instr, print, expr;
non terminal Boolean Expr;

precedence left NOT, AND, OR;

programme ::= {: 
          System.out.println("Programm start here : "); 
        :} prog
        ;

prog ::= instr prog
        | EXIT {: 
              System.out.println("Bye !");
              System.exit(-9);
            :} EOL
        |
        ;

instr ::= expr EOL
        | affect EOL
        | print EOL
        | EOL
        | error:e {: parser.report_error("Syntax error",e); :} EOL
        ;

Expr ::= NOT Expr:e1 {: RESULT= (!e1); :}
        | Expr:e1 AND Expr:e2 {: RESULT=(e1 && e2);:}
        | Expr:e1 OR Expr:e2 {: RESULT=(e1 || e2); :}
        | LPAR Expr:e RPAR {: RESULT=e; :}
        | VAR:v {: 
                  if(!tab.containsKey(v)){
                    System.out.println("ERROR: Variable <" + v + "> not identified");
                    RESULT = true;
                  }
                  else
                    RESULT = tab.get(v);
                :}
        | BOOL_VAL:b {: RESULT = b; :}
        ;

expr ::= Expr:e {: System.out.println(e); :}
        ;

affect ::= VAR:id AFF Expr:e {:
          tab.put(id,e);
          System.out.println(id+" equals "+e);
        :}
        ;

print ::= PRINT {: 
          AfficheTable();
        :}
        ;

